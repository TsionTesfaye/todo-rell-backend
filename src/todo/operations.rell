operation create_user(name) {
    val account = register_account();
    create user ( name, account.id,  account );
}

operation create_task(title:text, description:text, duedate:text) {
    val account = auth.authenticate();
    val user = user @ {account};
    create todo (title= title, description = description, duedate = duedate, user = user);

}

operation delete_task(id: byte_array){
    val account = auth.authenticate();
    val user = user @ {account};
    val task = require(todo @? { .id == id, .user == user}, "You can not delete this task");
    delete task;
}
operation edit_task(id: byte_array, title:text, description:text, duedate:text){
    val account = auth.authenticate();
    val user = user @ {account};
    val task = require(todo @? { .id == id, .user == user}, "You can not edit this task");
    update task (title = title, description = description, duedate = duedate);
}

operation toggle_task(id: byte_array){
    val account = auth.authenticate();
    val user = user @ {account};
    val status = require(todo @? { .id == id, .user == user}, "You can not toggle this task");
    update status (iscomplete = not(status.iscomplete));
}
operation update_profile(name){
    val account = auth.authenticate();
    val user = user @ {account};
    update user @ {.account == account } (.name = name);
}